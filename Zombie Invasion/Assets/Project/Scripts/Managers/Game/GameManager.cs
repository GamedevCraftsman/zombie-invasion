using System;
using System.Threading.Tasks;
using UnityEngine;
using Zenject;

public class GameManager : BaseManager, IGameManager
{
    // Dependencies
    [Inject] private CarController carController;
    [Inject] private HPManager hpManager;
    [Inject] private InputController inputController;
    [Inject] private HPUIController hpUIController;
    
    // State
    private GameState currentState = GameState.Menu;
   // private bool isInitialized = false;
    
    // Properties
    public GameState CurrentState => currentState;
    //public bool IsInitialized => isInitialized;
    
    protected override Task Initialize()
    {
        try
        {
            SubscribeToEvents();
            ChangeState(GameState.Menu);
        }
        catch (Exception e)
        {
            Debug.LogError(e);
        }
        
        
        // Debug.Log("GameManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞–ª–∞—Å—è...");
        // return InitializeAllSystems();
        
        return Task.CompletedTask;
    }
    
    /*private async Task InitializeAllSystems()
    {
        try
        {
            /#1#/ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø–æ —á–µ—Ä–∑—ñ
            Debug.Log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CarController...");
            await carController.InitializeAsync();
            
            Debug.Log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HPManager...");
            await hpManager.InitializeAsync();
            
            Debug.Log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HPUIController...");
            await hpUIController.InitializeAsync();
            
            Debug.Log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è InputController...");
            await inputController.InitializeAsync();
            
            isInitialized = true;
            Debug.Log("‚úÖ GameManager: –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!");#1#
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
            ChangeState(GameState.Menu);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            //LogSystemStatus();
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó GameManager: {ex.Message}");
            Debug.LogException(ex);
        }
    }*/
    
    private void SubscribeToEvents()
    {
        EventBus.Subscribe<StartGameEvent>(OnStartGameEvent);
        //EventBus.Subscribe<CarReachedEndEvent>(OnCarReachedEnd);
        EventBus.Subscribe<GameOverEvent>(OnGameOverEvent);
        EventBus.Subscribe<PlayerDamagedEvent>(OnPlayerDamaged);
    }
    
    private void UnsubscribeFromEvents()
    {
        EventBus?.Unsubscribe<StartGameEvent>(OnStartGameEvent);
        EventBus?.Unsubscribe<CarReachedEndEvent>(OnCarReachedEnd);
        EventBus?.Unsubscribe<GameOverEvent>(OnGameOverEvent);
        EventBus?.Unsubscribe<PlayerDamagedEvent>(OnPlayerDamaged);
    }
    
    private void OnStartGameEvent(StartGameEvent startEvent)
    {
        if (currentState == GameState.Menu)
        {
            StartGame();
        }
    }
    
    private void OnCarReachedEnd(CarReachedEndEvent carEndEvent)
    {
        Debug.Log("üèÅ GameManager: –ú–∞—à–∏–Ω–∞ –¥–æ—Å—è–≥–ª–∞ –∫—ñ–Ω—Ü—è!");
        
        if (hpManager.IsAlive)
        {
            Debug.Log("üéâ –ì—Ä–∞–≤–µ—Ü—å –∂–∏–≤ –¥–æ –∫—ñ–Ω—Ü—è - –ü–ï–†–ï–ú–û–ì–ê!");
            EndGame(true);
        }
        // else
        // {
        //     Debug.Log("üíÄ –ì—Ä–∞–≤–µ—Ü—å –º–µ—Ä—Ç–≤–∏–π - —Ü–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—è!");
        //     EndGame(false);
        // }
    }
    
    private void OnGameOverEvent(GameOverEvent gameOverEvent)
    {
        // –¶–µ–π event —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ
        ChangeState(GameState.GameOver);
        
        
        // –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ EndGame()
    }
    
    private void OnPlayerDamaged(PlayerDamagedEvent damageEvent)
    {
        Debug.Log($"‚ö° GameManager: –ì—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ {damageEvent.DamageAmount} —É—Ä–æ–Ω—É");
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ–º–µ—Ä –≥—Ä–∞–≤–µ—Ü—å
        if (!hpManager.IsAlive && currentState == GameState.Playing)
        {
            EndGame(false);
        }
    }
    
    private void ChangeState(GameState newState)
    {
        if (currentState == newState) return;
        
        GameState previousState = currentState;
        currentState = newState;
        
        Debug.Log($"üîÑ –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É –≥—Ä–∏: {previousState} ‚Üí {newState}");
        
        // –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É
        EventBus.Fire(new GameStateChangedEvent(previousState, newState));
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
        OnStateEntered(newState, previousState);
    }
    
    private void OnStateEntered(GameState newState, GameState previousState)
    {
        switch (newState)
        {
            case GameState.Menu:
                OnMenuEntered();
                break;
                
            case GameState.Playing:
                OnPlayingEntered();
                break;
                
            case GameState.GameOver:
                OnGameOverEntered();
                break;
                
            case GameState.Victory:
                OnVictoryEntered();
                break;
        }
    }
    
    private void OnMenuEntered()
    {
        Debug.Log("üìã –£–≤—ñ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω Menu");
        // –¢—É—Ç –º–æ–∂–Ω–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ UI –º–µ–Ω—é, –∑—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É –≥—Ä–∏ —Ç–æ—â–æ
    }
    
    private void OnPlayingEntered()
    {
        Debug.Log("üéÆ –£–≤—ñ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω Playing");
        // –¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–≥—Ä–æ–≤—É –º—É–∑–∏–∫—É, —Å—Ö–æ–≤–∞—Ç–∏ –º–µ–Ω—é —Ç–æ—â–æ
    }
    
    private void OnGameOverEntered()
    {
        Debug.Log("üíÄ –£–≤—ñ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω GameOver");
        // –¢—É—Ç –º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –ø–æ—Ä–∞–∑–∫–∏, –∑—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É —Ç–æ—â–æ
    }
    
    private void OnVictoryEntered()
    {
        Debug.Log("üéâ –£–≤—ñ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω Victory");
        // –¢—É—Ç –º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –ø–µ—Ä–µ–º–æ–≥–∏, –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–≤—è—Ç–∫–æ–≤—É –º—É–∑–∏–∫—É —Ç–æ—â–æ
    }
    
    // –ú–µ—Ç–æ–¥–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É IGameManager
    public void StartGame()
    {
        // if (!isInitialized)
        // {
        //     Debug.LogWarning("–°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó!");
        //     return;
        // }
        
        if (currentState != GameState.Menu)
        {
            Debug.LogWarning($"–ù–µ –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É –∑—ñ —Å—Ç–∞–Ω—É {currentState}!");
            return;
        }
        
        Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∏...");
        
        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        ResetGameState();
        
        // –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ Playing
        ChangeState(GameState.Playing);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–æ–¥—ñ—é –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º
        // (StartGameEvent —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ)
    }
    
    public void EndGame(bool victory)
    {
        if (currentState != GameState.Playing)
        {
            Debug.LogWarning($"–ù–µ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É –∑—ñ —Å—Ç–∞–Ω—É {currentState}!");
            return;
        }
        
        string result = victory ? "–ü–ï–†–ï–ú–û–ì–ê" : "–ü–û–†–ê–ó–ö–ê";
        Debug.Log($"üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ - {result}");
        
        // –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
        ChangeState(victory ? GameState.Victory : GameState.GameOver);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö —Å–∏—Å—Ç–µ–º
        EventBus.Fire(new GameOverEvent(victory));
        
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        LogFinalStats(victory);
    }
    
    public void RestartGame()
    {
        if (currentState == GameState.Playing)
        {
            Debug.LogWarning("–ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É –ø–æ–∫–∏ –≤–æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞!");
            return;
        }
        
        Debug.Log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä–∏...");
        
        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º
        ResetGameState();
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –º–µ–Ω—é
        ChangeState(GameState.Menu);
        
        Debug.Log("–ì—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É!");
    }
    
    private void ResetGameState()
    {
        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º
        //carController.ResetPosition();
        inputController.ResetForNewGame();
        
        // HP —Å–∫–∏–Ω–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ StartGameEvent
    }
    
    //---------------------------------------------------------
    //Delete
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é
    public void PauseGame()
    {
        if (currentState != GameState.Playing) return;
        
        Time.timeScale = 0f;
        Debug.Log("‚è∏Ô∏è –ì—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É");
    }
    
    public void ResumeGame()
    {
        if (currentState != GameState.Playing) return;
        
        Time.timeScale = 1f;
        Debug.Log("–ì—Ä–∞ –∑–Ω—è—Ç–∞ –∑ –ø–∞—É–∑–∏");
    }
    //---------------------------------------------------------
    // public bool CanStartGame()
    // {
    //     return isInitialized && currentState == GameState.Menu;
    // }
    
    public bool CanRestartGame()
    {
        return currentState == GameState.GameOver || currentState == GameState.Victory;
    }
    
    /*private void LogSystemStatus()
    {
        Debug.Log("=== SYSTEM STATUS ===");
        Debug.Log($"GameState: {currentState}");
        Debug.Log($"CarController –≥–æ—Ç–æ–≤–∏–π: {carController != null}");
        Debug.Log($"HPManager –≥–æ—Ç–æ–≤–∏–π: {hpManager != null}");
        Debug.Log($"HPUIController –≥–æ—Ç–æ–≤–∏–π: {hpUIController != null}");
        Debug.Log($"InputController –≥–æ—Ç–æ–≤–∏–π: {inputController != null}");
        Debug.Log($"–ü–æ—Ç–æ—á–Ω–µ HP: {hpManager?.CurrentHP}/{hpManager?.MaxHP}");
        Debug.Log($"–ú–∞—à–∏–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó: {carController?.Position}");
        Debug.Log("====================");
    }*/
    
    private void LogFinalStats(bool isWin)
    {
        Debug.Log("=== FINAL STATS ===");
        Debug.Log($"–†–µ–∑—É–ª—å—Ç–∞—Ç: {(isWin ? "–ü–ï–†–ï–ú–û–ì–ê" : "–ü–û–†–ê–ó–ö–ê")}");
        Debug.Log($"–§—ñ–Ω–∞–ª—å–Ω–µ HP: {hpManager.CurrentHP}/{hpManager.MaxHP}");
        Debug.Log($"–§—ñ–Ω–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è: {carController.Position}");
        Debug.Log($"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {carController.CurrentSpeed}");
        Debug.Log($"–§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω: {currentState}");
        Debug.Log("==================");
    }
    
    private void OnDestroy()
    {
        UnsubscribeFromEvents();
        Time.timeScale = 1f;
    }
}