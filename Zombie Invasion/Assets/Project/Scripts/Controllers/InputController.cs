using System;
using System.Threading.Tasks;
using UnityEngine;
using Zenject;

public class InputController : BaseController, IInputController
{
    [Inject] private IGameManager _gameManager;
    
    [Header("Input Settings")]
    [SerializeField] private bool enableKeyboardInput = true;
    [SerializeField] private bool enableMouseInput = true;
    [SerializeField] private bool enableTouchInput = true;
    [SerializeField] private KeyCode startGameKey = KeyCode.Space;
    
    // State
    private bool gameStarted = false;
    private bool inputEnabled = true;
    private InputType lastInputType = InputType.None;
    
    // Properties
    //public bool IsInputEnabled => inputEnabled;
   // public bool IsGameStarted => gameStarted;
   public bool IsInputEnabled { get; }
   public bool IsGameStarted { get; }
   public InputType LastInputType => lastInputType;
    
    // Events
    //public event Action OnGameStartRequested;

    //public event Action<InputType> OnInputDetected;
    //public event Action<InputType> OnInputDetected;
    
    protected override Task Initialize()
    {
        SubscribeToEvents();
        ResetInputState();
        
        Debug.Log("InputController —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return Task.CompletedTask;
    }
    
    private void SubscribeToEvents()
    {
        EventBus.Subscribe<GameOverEvent>(OnGameOver);
    }
    
    private void UnsubscribeFromEvents()
    {
        EventBus?.Unsubscribe<GameOverEvent>(OnGameOver);
    }
    
    private void ResetInputState()
    {
        gameStarted = false;
        inputEnabled = true;
        lastInputType = InputType.None;
    }
    
    private void OnGameOver(GameOverEvent gameOverEvent)
    {
        ResetInputState();
        Debug.Log("InputController –≥–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–æ—ó –≥—Ä–∏");
    }
    
    private void Update()
    {
       // if (!inputEnabled || gameStarted) return;
        
        InputType detectedInput = DetectInput();
       
        if (detectedInput != InputType.None && _gameManager.CurrentState == GameState.Menu)
        {
            lastInputType = detectedInput;
            //OnInputDetected?.Invoke(detectedInput);
            StartGame();
        }
    }
    
    private InputType DetectInput()
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥—É
        if (enableKeyboardInput && Input.GetKeyDown(startGameKey))
        {
            Debug.Log($"–ì—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ—à—É {startGameKey}");
            return InputType.Keyboard;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∏—à—ñ
        if (enableMouseInput && Input.GetMouseButtonDown(0))
        {
            Debug.Log("–ì—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª—ñ–∫ –º–∏—à—ñ");
            return InputType.Mouse;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Ç–∏–∫—É (–¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö)
        if (enableTouchInput && Input.touchCount > 0)
        {
            Touch touch = Input.GetTouch(0);
            if (touch.phase == TouchPhase.Began)
            {
                Debug.Log("–ì—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –¥–æ—Ç–∏–∫");
                return InputType.Touch;
            }
        }
        
        return InputType.None;
    }
    
    private void StartGame()
    {
        // gameStarted = true;
        // inputEnabled = false;
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ event –¥–ª—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
        //OnGameStartRequested?.Invoke();
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ EventBus –¥–ª—è backward compatibility
        
        EventBus.Fire(new ReadyGameEvent());
        Debug.Log($"üöÄ StartGameEvent –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {lastInputType}!");
    }
    
    // IInputController implementation
    public void EnableInput()
    {
        inputEnabled = true;
        Debug.Log("Input —É–≤—ñ–º–∫–Ω–µ–Ω–æ");
    }
    
    public void DisableInput()
    {
        inputEnabled = false;
        Debug.Log("Input –≤–∏–º–∫–Ω–µ–Ω–æ");
    }
    
    public void ResetForNewGame()
    {
        ResetInputState();
        Debug.Log("InputController —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏");
    }
    
    public void SetStartGameKey(KeyCode newKey)
    {
        startGameKey = newKey;
        Debug.Log($"–ö–ª–∞–≤—ñ—à–∞ –∑–∞–ø—É—Å–∫—É –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {newKey}");
    }
    
    public void EnableKeyboardInput(bool enable)
    {
        enableKeyboardInput = enable;
        Debug.Log($"–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏–π –≤–≤—ñ–¥: {(enable ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}");
    }
    
    public void EnableMouseInput(bool enable)
    {
        enableMouseInput = enable;
        Debug.Log($"–í–≤—ñ–¥ –º–∏—à—ñ: {(enable ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}");
    }
    
    public void EnableTouchInput(bool enable)
    {
        enableTouchInput = enable;
        Debug.Log($"–°–µ–Ω—Å–æ—Ä–Ω–∏–π –≤–≤—ñ–¥: {(enable ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}");
    }
    
    private void OnDestroy()
    {
        UnsubscribeFromEvents();
        
        // –û—á–∏—â—É—î–º–æ events
        //OnGameStartRequested = null;
        //OnInputDetected = null;
    }
}