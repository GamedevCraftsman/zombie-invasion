using System.Threading.Tasks;
using UnityEngine;
using Zenject;

public class CarControllerTester : MonoBehaviour
{
    [Inject] private IEventBus eventBus;
    [Inject] private CarController carController;
    
    [Header("Test Settings")]
    [SerializeField] private KeyCode startGameKey = KeyCode.Space;
    [SerializeField] private KeyCode damageTestKey = KeyCode.D;
    [SerializeField] private KeyCode winTestKey = KeyCode.W;
    [SerializeField] private KeyCode loseTestKey = KeyCode.L;
    
    private bool gameStarted = false;
    
    private void Start()
    {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ CarController
        //await carController.InitializeAsync();
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        eventBus.Subscribe<StartGameEvent>(OnStartGame);
        eventBus.Subscribe<CarReachedEndEvent>(OnCarReachedEnd);
        eventBus.Subscribe<PlayerDamagedEvent>(OnPlayerDamaged);
        eventBus.Subscribe<GameOverEvent>(OnGameOver);
        
        Debug.Log("CarController Tester –≥–æ—Ç–æ–≤–∏–π!");
        Debug.Log($"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å {startGameKey} –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏");
        Debug.Log($"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å {damageTestKey} –¥–ª—è —Ç–µ—Å—Ç—É —É—Ä–æ–Ω—É");
        Debug.Log($"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å {winTestKey} –¥–ª—è —Ç–µ—Å—Ç—É –ø–µ—Ä–µ–º–æ–≥–∏");
        Debug.Log($"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å {loseTestKey} –¥–ª—è —Ç–µ—Å—Ç—É –ø–æ—Ä–∞–∑–∫–∏");
    }
    
    private void Update()
    {
        if (Input.GetKeyDown(startGameKey) && !gameStarted)
        {
            StartGame();
        }
        
        if (Input.GetKeyDown(damageTestKey))
        {
            TestDamage();
        }
        
        if (Input.GetKeyDown(winTestKey))
        {
            TestWin();
        }
        
        if (Input.GetKeyDown(loseTestKey))
        {
            TestLose();
        }
        
        // –¢–µ—Å—Ç —Ç–∞–ø—É –ø–æ –µ–∫—Ä–∞–Ω—É (–¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö)
        if (Input.GetMouseButtonDown(0) && !gameStarted)
        {
            StartGame();
        }
    }
    
    private void StartGame()
    {
        Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∏ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–µ—Ä!");
        eventBus.Fire(new StartGameEvent());
        gameStarted = true;
    }
    
    private void TestDamage()
    {
        Debug.Log("üí• –¢–µ—Å—Ç —É—Ä–æ–Ω—É: 25 HP");
        eventBus.Fire(new PlayerDamagedEvent(25));
    }
    
    private void TestWin()
    {
        Debug.Log("üéâ –¢–µ—Å—Ç –ø–µ—Ä–µ–º–æ–≥–∏!");
        eventBus.Fire(new GameOverEvent(true));
        gameStarted = false;
    }
    
    private void TestLose()
    {
        Debug.Log("üíÄ –¢–µ—Å—Ç –ø–æ—Ä–∞–∑–∫–∏!");
        eventBus.Fire(new GameOverEvent(false));
        gameStarted = false;
    }
    
    // Event handlers –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    private void OnStartGame(StartGameEvent e)
    {
        Debug.Log("‚úÖ StartGameEvent –æ—Ç—Ä–∏–º–∞–Ω–æ!");
        Debug.Log($"–ú–∞—à–∏–Ω–∞ —Ä—É—Ö–∞—î—Ç—å—Å—è: {carController.IsMoving}");
    }
    
    private void OnCarReachedEnd(CarReachedEndEvent e)
    {
        Debug.Log("üèÅ CarReachedEndEvent –æ—Ç—Ä–∏–º–∞–Ω–æ!");
    }
    
    private void OnPlayerDamaged(PlayerDamagedEvent e)
    {
        Debug.Log($"üî• PlayerDamagedEvent: {e.DamageAmount} —É—Ä–æ–Ω—É");
    }
    
    private void OnGameOver(GameOverEvent e)
    {
        Debug.Log($"üèÜ GameOverEvent: {(e.IsWin ? "–ü–ï–†–ï–ú–û–ì–ê" : "–ü–û–†–ê–ó–ö–ê")}");
        Debug.Log($"–ú–∞—à–∏–Ω–∞ —Ä—É—Ö–∞—î—Ç—å—Å—è: {carController.IsMoving}");
        Debug.Log($"–ü–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å: {carController.CurrentSpeed}");
    }
    
    private void OnDestroy()
    {
        eventBus?.Unsubscribe<StartGameEvent>(OnStartGame);
        eventBus?.Unsubscribe<CarReachedEndEvent>(OnCarReachedEnd);
        eventBus?.Unsubscribe<PlayerDamagedEvent>(OnPlayerDamaged);
        eventBus?.Unsubscribe<GameOverEvent>(OnGameOver);
    }
}